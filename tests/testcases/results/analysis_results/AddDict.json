{"analysis_results": [11, "/tmp/AddDict.java:14: error: cannot find symbol\n      @             result.containsKey(key) && result.get(key) == d1.get(key) + d2.get(key));\n                    ^\n  symbol:   variable result\n  location: class AddDict\n/tmp/AddDict.java:14: error: cannot find symbol\n      @             result.containsKey(key) && result.get(key) == d1.get(key) + d2.get(key));\n                                               ^\n  symbol:   variable result\n  location: class AddDict\n/tmp/AddDict.java:16: error: cannot find symbol\n      @             result.containsKey(key) && result.get(key) == d1.get(key));\n                    ^\n  symbol:   variable result\n  location: class AddDict\n/tmp/AddDict.java:16: error: cannot find symbol\n      @             result.containsKey(key) && result.get(key) == d1.get(key));\n                                               ^\n  symbol:   variable result\n  location: class AddDict\n/tmp/AddDict.java:18: error: cannot find symbol\n      @             result.containsKey(key) && result.get(key) == d2.get(key));\n                    ^\n  symbol:   variable result\n  location: class AddDict\n/tmp/AddDict.java:18: error: cannot find symbol\n      @             result.containsKey(key) && result.get(key) == d2.get(key));\n                                               ^\n  symbol:   variable result\n  location: class AddDict\n/tmp/AddDict.java:19: error: cannot find symbol\n      @ ensures (\\forall String key; result.containsKey(key);\n                                     ^\n  symbol:   variable result\n  location: class AddDict\n/tmp/AddDict.java:25: error: variable key is already defined in method addDict(java.util.HashMap<java.lang.String,java.lang.Integer>,java.util.HashMap<java.lang.String,java.lang.Integer>)\n        /*@ loop_invariant (\\forall String key; d1.containsKey(key); \n                                           ^\n/tmp/AddDict.java:27: error: variable key is already defined in method addDict(java.util.HashMap<java.lang.String,java.lang.Integer>,java.util.HashMap<java.lang.String,java.lang.Integer>)\n          @ loop_invariant (\\forall String key; d2.containsKey(key) && !d1.containsKey(key); \n                                           ^\n/tmp/AddDict.java:38: error: variable key is already defined in method addDict(java.util.HashMap<java.lang.String,java.lang.Integer>,java.util.HashMap<java.lang.String,java.lang.Integer>)\n        /*@ loop_invariant (\\forall String key; d2.containsKey(key) && !d1.containsKey(key); \n                                           ^\n/tmp/AddDict.java:40: error: variable key is already defined in method addDict(java.util.HashMap<java.lang.String,java.lang.Integer>,java.util.HashMap<java.lang.String,java.lang.Integer>)\n          @ loop_invariant (\\forall String key; d1.containsKey(key); \n                                           ^\n11 errors\n", "// failed\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass AddDict {\n\n    /*@ requires d1 != null && d2 != null;\n      @ requires (\\forall String key; d1.containsKey(key); d1.get(key) != null);\n      @ requires (\\forall String key; d2.containsKey(key); d2.get(key) != null);\n      @ ensures (\\forall String key; d1.containsKey(key) && d2.containsKey(key);\n      @             result.containsKey(key) && result.get(key) == d1.get(key) + d2.get(key));\n      @ ensures (\\forall String key; d1.containsKey(key) && !d2.containsKey(key);\n      @             result.containsKey(key) && result.get(key) == d1.get(key));\n      @ ensures (\\forall String key; !d1.containsKey(key) && d2.containsKey(key);\n      @             result.containsKey(key) && result.get(key) == d2.get(key));\n      @ ensures (\\forall String key; result.containsKey(key);\n      @             d1.containsKey(key) || d2.containsKey(key));\n      @*/\n    public static HashMap<String, Integer> addDict(HashMap<String, Integer> d1, HashMap<String, Integer> d2) {\n        HashMap<String, Integer> result = new HashMap<>();\n        \n        /*@ loop_invariant (\\forall String key; d1.containsKey(key); \n          @                    result.containsKey(key) <==> d2.containsKey(key) && result.get(key) == d1.get(key) + (d2.containsKey(key) ? d2.get(key) : 0));\n          @ loop_invariant (\\forall String key; d2.containsKey(key) && !d1.containsKey(key); \n          @                    !result.containsKey(key));\n          @*/\n        for (String key : d1.keySet()) {\n            if (d2.containsKey(key)) {\n                result.put(key, d1.get(key) + d2.get(key));\n            } else {\n                result.put(key, d1.get(key));\n            }\n        }\n        \n        /*@ loop_invariant (\\forall String key; d2.containsKey(key) && !d1.containsKey(key); \n          @                    result.containsKey(key) == (d2.containsKey(key) ? true : false));\n          @ loop_invariant (\\forall String key; d1.containsKey(key); \n          @                    result.containsKey(key));\n          @*/\n        for (String key : d2.keySet()) {\n            if (!d1.containsKey(key)) {\n                result.put(key, d2.get(key));\n            }\n        }\n        return result;\n    }\n}\n"]}